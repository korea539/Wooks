기본 내장 함수 (참고 사이트 : https://wikidocs.net/32)


1. split / 스플릿 / 문자열을 나누어서 리스트에 담는 기능
    문자열.split(나눌 문자)
    "This,is,split".split(",") => ['This', 'is', 'split']

2. replace / 리플레이스 / 특정한 문자를 다른 문자로 대체하는 기능
    대체를 하려는 대상(문자열, 리스트는 안됨).replace(제거하려는 문자, 제거된 자리에 들어갈 문자, 변경할 횟수(default값은 문자열 전체))
    "This,is,replace".replace(",", "", 1) => 'Thisis,replace'

3. abs(x) => x를 절대값으로 리턴

4. all(x) => x는 iterable(반복 가능한, for문 사용가능한) 데이터, x에 요소 중 거짓(0값도 거짓)이 하나라도 있으면 False, 아니면 True
    all([1, 2, 3]) => True
    all([1, 2, 3, 0]) => False
    
5. any(x) => all과 조건은 같지만 모두 거짓일 때만 False 리턴, 아니면 True

! 특이사항 : 입력 인수가 []나 "" 이면 all은 True, any는 False

6. chr(x) => x는 숫자만, 그 숫자에 해당하는 유니코드(모든 컴퓨터에서 일관되게 표현하고 다룰 수 있게 잡힌 코드)를 리턴
    chr(97) => "a"
    chr(44032) => "가"

7. dir(객체) => 객체가 가지고 있는 변수나 함수를 모두 출력해주는 함수
    dir([1, 2]) => ['__add__', '__class__', ... ] / 어떤 기능이 있는지 알 수 있음
    
8. divmod(a, b) => a, b 2개의 숫자를 받음 / a를 b로 나눈 몫과 나머지를 튜플로 리턴
    divmod(7, 3) => (2, 1)

9. enumerate / 열거함수 / 순서잡힌 채로 열거 / 순서함수 / iterable 데이터 위치 확인
    보통 for 문과 같이 사용
    for i, name in enumerate(["A", "B", "C", "D"]):
        print(i, name)

10. eval(expression) / 문자열로 구성된 표현식 실행 / 문자열 실행시키는 방법
    eval("1+2") => 3
    eval('"hi" + "man"') => 'himan' / 전체 문자를 포함하는 ""과 안의 문자 ''를 구분해야 작동
    eval("divmod(4, 3)") => (1, 1)

11. filter(func, iterable) / 걸러내는 함수
    iterable 객체를 함수에 적용해서 True 값만 참으로 묶어내서 리턴(리스트 형식으로)

12. 파이썬에선 기본적으로 10진수 표현법 사용
    다른 진수의 형태로 숫자를 표현하려면 숫자 앞에 접두어를 붙여야 함
    2진수 : 0b / 42 == 0b101010
    8진수 : 0o / 42 == 0o52
    16진수 : 0x / 42 == 0x2a
    
    2진수로 반환 : bin(42) => "0b101010"
    8진수로 반환 : oct(42) => "0o52"
    16진수로 반환 : hex(42) => "0x2a"

13. id(object) / 고유 주소 값 / 객체의 고유값
    id(3) => 135072304
    컴퓨터의 객체들에는 저마다의 고유값이 존재
    이 함수를 통해 해당 고유값을 볼 수 있음

14. input([prompt]) / 사용자 입력 함수 / 입력 인수
    * [] 기호는 괄호 안의 내용을 생략할 수 있다는 관례 표기법
    input("숫자를 입력하세요.")

15. int(x) / 문자열의 숫자나 소수점 숫자를 정수로 리턴하는 함수
    int("3") => 3
    int(3.14) => 3
    또한 다른 진수의 숫자를 10진수의 숫자로 변환할 수도 있음
    int("11", 2) => 3 (2진수로 표현된 "11"의 10진수 값)
    int("1Aa", 16) => 26 (16진수로 표현된 "1A"의 10진수 값)

16. isinstance(object, class) / 첫 번째는 객체, 두 번째는 클래스 / 해당 객체가 클래스에 의해 만들어졌으면 True 출력
    ```
    class Person: pass
    a = person()
    isinstance(a, Person) => True
    ```
    ```
    b = 3
    isinstance(b, Person) => False
    ```

17. len(s) / 입력값 s의 길이(요소의 전체 개수)를 리턴하는 함수
    len("python") => 6
    len([1, 2, 3]) => 3
    len((1, "a")) => 2

18. list(iterable) / 반복 가능한 데이터를 입력받아 리스트로 만들어주는 함수
    list("python") => ["p", "y", "t", "h", "o", "n"]
    * 기존 list에 list 함수를 사용하면 기존 list를 복사하여 리턴

19. map(f, iterable) / 함수(f)와 반복 가능한 데이터(iterable)를 입력으로 받음
    iterable 데이터 각 요소에 함수(f)를 적용하는 함수
    def two_times(x):
        return x*2

    list(map(two_times, [1, 2, 3, 4])) => [2, 4, 6, 8]

    단순히 map 하나만 사용하여 결과를 도출하면 지정좌표(?, 좌표와 비슷한 의미)값으로 도출됨
    list 값을 iterable 값으로 넣었다면 list를 넣어서 결과물을 list로 확인할 수 있도록 하자

    ``` lambda를 이용한 사례
    list(map(lambda a : a*2, [1, 2, 3, 4])) => 위와 도출값이 같음
    lambda x : f(x), iterable / iterable한 값을 바로 앞에 있는 함수로 적용하는 함수
    ```

20. max(iterable) / 반복 가능한 데이터 중 최댓값 리턴

21. min(iterable) / max와 반대로 최솟값 리턴

22. oct(x) / 정수를 8진수 문자열로 바꿔주는 함수
    oct(34) => "0o42"
    oct(12345) => "0o30071"

23. open(filename, [mode]) / 파일 이름과 읽기 방법을 입력받아 파일을 리턴
    mode의 종류
        * w : 쓰기 모드로 파일 열기
        * r : 읽기 모드로 파일 열기
        * a : 추가 모드로 파일 열기
        * b : 바이너리 모드로 파일 열기
        * binary 파일이란 데이터의 저장과 처리를 목적으로 0과 1의 2진 형식으로 인코딩된 파일
        * 데이터의 변환이 일어나지 않음
        * b는 w, r, a와 함께 사용

    f = open("binary_file", "rb")

24. ord(c) / 문자의 유니코드 숫자 값 리턴 함수
    ord("a") => 97
    ord("가") => 44032

25. pow(x, y) / x의 y 제곱한 값 리턴 함수
    pow(2, 4) => 16
    pow(3, 3) => 27

26. range(start, stop, step) / 입력받은 숫자에 해당하는 범위 값을 반복 가능한 객체로 만들어 리턴
    stop은 그 숫자를 제외한 이전까지의 수
    list(range(1, 5, 2)) => [1, 3]

27. round(number, [ndigits]) / number를 입력받아 반올림 리턴 함수
    round(4.5) => 5
    round(4.5555, 2) => 4.56

28. sorted(iterable) / iterable 객체를 정렬한 후 리스트로 리턴(숫자와 알파벳, 오름차순)
    sorted([3, 2, 1]) => [1, 2, 3]

29. str(object) / 문자열 형태로 객체 변환 함수
    str(3) => "3"
    str("hi") => "hi"

30. sum(iterable) / 입력 데이터의 합을 리턴
    sum([1, 2, 3]) => 6

31. tuple(iterable) / iterable 데이터를 튜플로 바꾸는 리턴 함수
    tuple("abc") => ("a", "b", "c")

32. type(object) / 입력값의 자료형 알려주는 함수
    type("abc") => class "str"
    type([ ]) => class "list"
    
33. zip(iterable) / 동일한 개수로 이루어진 데이터 묶어서 리턴 함수
    list(zip([1, 2, 3], [4, 5, 6])) => [(1, 4), (2, 5), (3, 6)]
    
34. strip(삭제할 문자열) / 문자열 양 끝으로 삭제할 문자를 제거하는 기능
    "abHello worldab".strip("ab") => "Hello world"
    lstrip / 왼쪽에서만 삭제
    rstrip / 오른쪽에서만 삭제
    
35. translate({"치환하고 싶은 문자" : "넣을 문자"}) / 문자열을 한번에 치환할 수 있는 기능
    "abbaabbbaaabbbb".translate({"a" : ""}) => "bbbbbbbbbb"
    딕셔너리를 추가하면 한번에 여러개 가능
    
36. re.sub(치환하고 싶은 문자열(정규표현), 새로운 문자열(정규표현), 대상변수[,치환 횟수]) / 정규표현식을 사용하여 문자열을 치환하는 기능
    import re (필수)
    re.sub(r"[a-z]", "", "abc123def456") => "123456"
    
37. eval("연산식") / 문자열로 된 연산식을 풀어주는 함수
    eval("3 + 4") => 7
    eval('round(4.9)') => 5.0 (round와 같은 연산관련 기능도 가능)
    
    
    
    
    
--------------------------------------------------------------------------------------------------------------------


정규표현식 (참고 사이트 : https://wikidocs.net/4308)
re 모듈을 꼭 시행할 것


[] = 문자클래스
[From - To] = From부터 To까지를 의미 / [1-10] = [12345678910] / [a-zA-Z] = 모든 알파벳
[^] = 반대(not)의 의미
. = 줄바꿈 문자(\n)를 제외한 모든 문자와 매치 / a.b => a와 b 사이에 어떤 문자가 들어가도 매치
* = * 앞에 있는 문자가 0부터 무한대로 반복될 수 있다는 의미 / ca*t => ct, cat, caaaaat 다 가능
+ = * 와 의미가 거의 다 똑같지만 1부터 반복 실행 / ca+t 에서 ct는 매치 안됨
{m} = 반드시 m만큼 앞의 문자를 반복 실행 / ca{2}t => caat 를 의미
{m, n} = m ~ n만큼 앞의 문자를 반복 실행 / ca{2, 5}t => caat, caaat, caaaat, caaaaat 모두 다 매치 가능
? = {0, 1}을 의미 / ca?t => ct, cat 두개를 의미


re.compile(x) = x의 값을 정규 표현식을 적용하겠다라는 의미
match() = 문자열의 처음부터 정규식과 매치되는지 조사
search() = 문자열 전체를 검색하여 정규식과 매치되는지 조사
    match와 차이점은 match는 처음부터 조사하기 때문에 앞부분에 표현식이 일치하지 않으면 None이 출력되지만
    search는 매치가 된 부분을 구간으로 알려준다.
findall() = 정규식과 매치되는 모든 문자열(substring)을 리스트로 리턴
finditer() = 정규식과 매치되는 모든 문자열(substring)을 반복 가능한 객체로 리턴
    findall과 차이점은 finditer로 찾은 값들은 iterable한 값을 가지는 것이고
    그 요소들이 match된 객체들
    
re.compile.match("문자열") / match 메서드, 문자열을 정규표현식에 맞춘 후에 알려주는 정보들
    group() = 매치된 문자열을 리턴 
    start() = 매치된 문자열의 시작 위치 리턴
    end() = 매치된 문자열의 끝 위치를 리턴
    span() = 매치된 문자열의 (시작, 끝)에 해당하는 튜플 


# 자주 사용하는 문자 클래스
\d = 숫자와 매치, [0-9]와 동일
\D = \d 값의 not값, [^0-9]와 동일
\s = whitespace 문자와 매치, [ \t\n\r\f\v]와 동일한 표현식, 맨 앞 빈칸은 실수가 아니라 공백문자(space)를 의미
\S = \s 값의 not값, [^ \t\n\r\f\v]와 동일
\w = 문자와 숫자(alphanumeric) 매치, [a-zA-Z0-9_]와 동일
\W = \w 값의 not값, [^a-zA-Z0-9_] 와 동일




--------------------------------------------------------------------------------------------------------------------


파이썬 산술 연산자 7가지


+ : 덧셈
- : 뺄셈
* : 곱셈
/ : 나눗셈
** : 거듭제곱
// : 몫
% : 나머지


--------------------------------------------------------------------------------------------------------------------


이 외 코드들


print 옵션들
    sep / separation의 준말, 구분자를 지정하는 함수
        print("S", "E", "P", sep="2") => S@E@p

    end / 그 뒤 출력값과 이어서 출력
        print("I like", end=" ")
        print("money") => I like money

    format / 부분적으로 문자열 바꾸기
        print("{0}월 {1}일 입니다.".format(10, 31)) => 10월 31일 입니다.

    Escape / 파이썬 문법을 탈출하여 출력하고 싶을때 사용
        \n : 줄바꿈
        \t : 탭(TAP)
        \\ : "\" 출력
        \' : 작은 따옴표 출력
        \" : 큰 따옴표 출력
        \b : 백 스페이스, 삭제를 의미


random.sample(range(start, stop), counts) => 범위 내에서 랜덤한 수들을 counts의 수만큼 추출


HTML 코드 정리
requests 모듈
    requests.get(URL) / 해당 URL의 요청을 받아오는 기능
    requests.text / 받아온 사이트를 text화
    .get_text() / 리스트 안 내용들을 text화


bs 모듈
    .select() / 사용할 태그를 선택해서 가져오는 기능(path를 괄호안에 넣어주기)




--------------------------------------------------------------------------------------------------------------------


따로 사용하는 특정 코드들


리스트 컴프리헨션 활용
    [my_str[i: i + n] for i in range(0, len(my_str), n)]
    [i for i in range if @@] / for 문과 if 문을 함께 사용할 때, 이와 같이 사용

if 문 한줄에 사용할 시
    True 값 if 조건 else False 값
    

--------------------------------------------------------------------------------------------------------------------


def solution(s):
    answer = ""
    for i in "abcdefghijklmnopqrstuvwsyz":
        if 1 == s.count(i):
            answer += i
            
    return answer
영문자를 하나만 있는 것을 하나씩만 가져올 때 코드


--------------------------------------------------------------------------------------------------------------------


