기본 내장 함수 (참고 사이트 : https://wikidocs.net/32)


1. split / 스플릿 / 문자열을 나누어서 리스트에 담는 기능
    문자열.split(나눌 문자)
    "This,is,split".split(",") => ['This', 'is', 'split']

2. replace / 리플레이스 / 특정한 문자를 다른 문자로 대체하는 기능
    대체를 하려는 대상(문자열, 리스트는 안됨).replace(제거하려는 문자, 제거된 자리에 들어갈 문자, 변경할 횟수(default값은 문자열 전체))
    "This,is,replace".replace(",", "", 1) => 'Thisis,replace'

3. abs(x) => x를 절대값으로 리턴

4. all(x) => x는 iterable(반복 가능한, for문 사용가능한) 데이터, x에 요소 중 거짓(0값도 거짓)이 하나라도 있으면 False, 아니면 True
    all([1, 2, 3]) => True
    all([1, 2, 3, 0]) => False
    
5. any(x) => all과 조건은 같지만 모두 거짓일 때만 False 리턴, 아니면 True

! 특이사항 : 입력 인수가 []나 "" 이면 all은 True, any는 False

6. chr(x) => x는 숫자만, 그 숫자에 해당하는 유니코드(모든 컴퓨터에서 일관되게 표현하고 다룰 수 있게 잡힌 코드)를 리턴
    chr(97) => "a"
    chr(44032) => "가"

7. dir(객체) => 객체가 가지고 있는 변수나 함수를 모두 출력해주는 함수
    dir([1, 2]) => ['__add__', '__class__', ... ] / 어떤 기능이 있는지 알 수 있음
    
8. divmod(a, b) => a, b 2개의 숫자를 받음 / a를 b로 나눈 몫과 나머지를 튜플로 리턴
    divmod(7, 3) => (2, 1)

9. enumerate / 열거함수 / 순서잡힌 채로 열거 / 순서함수 / iterable 데이터 위치 확인
    보통 for 문과 같이 사용
    for i, name in enumerate(["A", "B", "C", "D"]):
        print(i, name)

10. eval(expression) / 문자열로 구성된 표현식 실행 / 문자열 실행시키는 방법
    eval("1+2") => 3
    eval('"hi" + "man"') => 'himan' / 전체 문자를 포함하는 ""과 안의 문자 ''를 구분해야 작동
    eval("divmod(4, 3)") => (1, 1)

11. filter(func, iterable) / 걸러내는 함수
    iterable 객체를 함수에 적용해서 True 값만 참으로 묶어내서 리턴(리스트 형식으로)

12. 파이썬에선 기본적으로 10진수 표현법 사용
    다른 진수의 형태로 숫자를 표현하려면 숫자 앞에 접두어를 붙여야 함
    2진수 : 0b / 42 == 0b101010
    8진수 : 0o / 42 == 0o52
    16진수 : 0x / 42 == 0x2a
    
    2진수로 반환 : bin(42) => "0b101010"
    8진수로 반환 : oct(42) => "0o52"
    16진수로 반환 : hex(42) => "0x2a"

13. id(object) / 고유 주소 값 / 객체의 고유값
    id(3) => 135072304
    컴퓨터의 객체들에는 저마다의 고유값이 존재
    이 함수를 통해 해당 고유값을 볼 수 있음

14. input([prompt]) / 사용자 입력 함수 / 입력 인수
    * [] 기호는 괄호 안의 내용을 생략할 수 있다는 관례 표기법
    input("숫자를 입력하세요.")

15. int(x) / 문자열의 숫자나 소수점 숫자를 정수로 리턴하는 함수, 무조건 내림 개념으로 작동
    int("3") => 3
    int(3.14) => 3
    또한 다른 진수의 숫자를 10진수의 숫자로 변환할 수도 있음, 첫번째 값이 문자열이여야 함
    int("11", 2) => 3 (2진수로 표현된 "11"의 10진수 값)
    int("1Aa", 16) => 26 (16진수로 표현된 "1A"의 10진수 값)

16. isinstance(object, class) / 첫 번째는 객체, 두 번째는 클래스 / 해당 객체가 클래스에 의해 만들어졌으면 True 출력
    ```
    class Person: pass
    a = person()
    isinstance(a, Person) => True
    ```
    ```
    b = 3
    isinstance(b, Person) => False
    ```

17. len(s) / 입력값 s의 길이(요소의 전체 개수)를 리턴하는 함수
    len("python") => 6
    len([1, 2, 3]) => 3
    len((1, "a")) => 2

18. list(iterable) / 반복 가능한 데이터를 입력받아 리스트로 만들어주는 함수
    list("python") => ["p", "y", "t", "h", "o", "n"]
    * 기존 list에 list 함수를 사용하면 기존 list를 복사하여 리턴

19. map(f, iterable) / 함수(f)와 반복 가능한 데이터(iterable)를 입력으로 받음
    iterable 데이터 각 요소에 함수(f)를 적용하는 함수
    def two_times(x):
        return x*2

    list(map(two_times, [1, 2, 3, 4])) => [2, 4, 6, 8]

    단순히 map 하나만 사용하여 결과를 도출하면 지정좌표(?, 좌표와 비슷한 의미)값으로 도출됨
    list 값을 iterable 값으로 넣었다면 list를 넣어서 결과물을 list로 확인할 수 있도록 하자

    ``` lambda를 이용한 사례
    list(map(lambda a : a*2, [1, 2, 3, 4])) => 위와 도출값이 같음
    lambda x : f(x), iterable / iterable한 값을 바로 앞에 있는 함수로 적용하는 함수
    ```

20. max(iterable) / 반복 가능한 데이터 중 최댓값 리턴

21. min(iterable) / max와 반대로 최솟값 리턴

22. oct(x) / 정수를 8진수 문자열로 바꿔주는 함수
    oct(34) => "0o42"
    oct(12345) => "0o30071"

23. open(filename, [mode]) / 파일 이름과 읽기 방법을 입력받아 파일을 리턴
    mode의 종류
        * w : 쓰기 모드로 파일 열기
        * r : 읽기 모드로 파일 열기
        * a : 추가 모드로 파일 열기
        * b : 바이너리 모드로 파일 열기
        * binary 파일이란 데이터의 저장과 처리를 목적으로 0과 1의 2진 형식으로 인코딩된 파일
        * 데이터의 변환이 일어나지 않음
        * b는 w, r, a와 함께 사용

    f = open("binary_file", "rb")

24. ord(c) / 문자의 유니코드 숫자 값 리턴 함수
    ord("a") => 97
    ord("가") => 44032

25. pow(x, y) / x의 y 제곱한 값 리턴 함수
    pow(2, 4) => 16
    pow(3, 3) => 27

26. range(start, stop, step) / 입력받은 숫자에 해당하는 범위 값을 반복 가능한 객체로 만들어 리턴
    stop은 그 숫자를 제외한 이전까지의 수
    list(range(1, 5, 2)) => [1, 3]

27. round(number, [ndigits]) / number를 입력받아 반올림 리턴 함수
    round(4.5) => 5
    round(4.5555, 2) => 4.56

28. sorted(iterable) / iterable 객체를 정렬한 후 리스트로 리턴(숫자와 알파벳, 오름차순)
    sorted([3, 2, 1]) => [1, 2, 3]
    reverse=True를 sorted 함수안에 추가하면 내림차순으로 정렬
    대문자와 소문자를 비교하면 소문자가 더 작은 것으로 

29. str(object) / 문자열 형태로 객체 변환 함수
    str(3) => "3"
    str("hi") => "hi"

30. sum(iterable) / 입력 데이터의 합을 리턴
    sum([1, 2, 3]) => 6

31. tuple(iterable) / iterable 데이터를 튜플로 바꾸는 리턴 함수
    tuple("abc") => ("a", "b", "c")

32. type(object) / 입력값의 자료형 알려주는 함수
    type("abc") => class "str"
    type([ ]) => class "list"
    
33. zip(iterable) / 동일한 개수로 이루어진 데이터 묶어서 리턴 함수
    list(zip([1, 2, 3], [4, 5, 6])) => [(1, 4), (2, 5), (3, 6)]
    
34. strip(삭제할 문자열) / 문자열 양 끝으로 삭제할 문자를 제거하는 기능
    "abHello worldab".strip("ab") => "Hello world"
    lstrip / 왼쪽에서만 삭제
    rstrip / 오른쪽에서만 삭제
    
35. translate({"치환하고 싶은 문자" : "넣을 문자"}) / 문자열을 한번에 치환할 수 있는 기능
    "abbaabbbaaabbbb".translate({"a" : ""}) => "bbbbbbbbbb"
    딕셔너리를 추가하면 한번에 여러개 가능
    
36. re.sub(치환하고 싶은 문자열(정규표현), 새로운 문자열(정규표현), 대상변수[,치환 횟수]) / 정규표현식을 사용하여 문자열을 치환하는 기능
    import re (필수)
    re.sub(r"[a-z]", "", "abc123def456") => "123456"
    
37. eval("연산식") / 문자열로 된 연산식을 풀어주는 함수
    eval("3 + 4") => 7
    eval('round(4.9)') => 5.0 (round와 같은 연산관련 기능도 가능)
    
38. index(value, start, end) / start부터 end까지 범위에서 value 값의 위치를 알려주는 함수
    [1, 3, 9, 5, 7].index(5) => 3
    "13957".index("9") => 2
    
39. isdigit() / "문자열".isdigit()을 하면 문자열에 모두 숫자로만 되어 있어야 True값 리턴
    +, - 기호 그리고 . 기호는 False로 인식
    "1234".isdigit() => True
    "a1234".isdigit() => False
    
40. "문자열".isupper() / 문자열이 전부 대문자면 True 출력, 반대는 islower()
    "ABCD".isupper() => True
    
41. "문자열".upper() / 문자열을 모두 대문자로 바꿔주는 함수, 반대는 lower()
    "abcd".upper() => "ABCD"

42. from functools import reduce
    reduce(lambda x, y: x + y(function), iterable[, initializer]) / iterable한 객체에서 function의 기능을 누적해서 발생하는 코드
    from functools import reduce
    numbers = [1, 2, 3, 4, 5]
    result = reduce(lambda x, y: x + y, numbers)
    print(result) # 출력결과: 15
    
43. bin(i|j) = 두 개의 정수 i와 j를 비트 OR 연산한 결과를 이진수로 반환
    비트연산은 0과 1로 나타내는 이진법과 동일한 연산자
    OR 연산은 두 비트중 하나라도 1이라면 1로 설정하는 연산자
    
44. list.append(x) = list에 x의 요소를 추가 / 맨 뒤에 추가

45. list.extend(x) = append는 x 자체를 요소 하나로 추가된다면 extend()는 iterable한 데이터만 올 수 있음
    list에 x가 list라면 x의 요소들을 추가
    
46. list.insert(i, x) = list에 x요소를 i번째 인덱스에 추가
    i에 -1을 한다고 해서 맨 뒤로 추가되지 않고 뒤에서 두 번째에 추가
    맨 뒤에 추가하고 싶다면 i에 len(x)를 대입
    
    
--------------------------------------------------------------------------------------------------------------------


정규표현식 (참고 사이트 : https://wikidocs.net/4308)
re 모듈을 꼭 시행할 것


[] = 문자클래스
[From - To] = From부터 To까지를 의미 / [1-10] = [12345678910] / [a-zA-Z] = 모든 알파벳
[^] = 반대(not)의 의미
. = 줄바꿈 문자(\n)를 제외한 모든 문자와 매치 / a.b => a와 b 사이에 어떤 문자가 들어가도 매치
* = * 앞에 있는 문자가 0부터 무한대로 반복될 수 있다는 의미 / ca*t => ct, cat, caaaaat 다 가능
+ = * 와 의미가 거의 다 똑같지만 1부터 반복 실행 / ca+t 에서 ct는 매치 안됨
{m} = 반드시 m만큼 앞의 문자를 반복 실행 / ca{2}t => caat 를 의미
{m, n} = m ~ n만큼 앞의 문자를 반복 실행 / ca{2, 5}t => caat, caaat, caaaat, caaaaat 모두 다 매치 가능
? = {0, 1}을 의미 / ca?t => ct, cat 두개를 의미
사용 예시 = re.sub(r"[a-zA-Z]", "바꿀 문자", "원본 문자열")


re.compile(x) = x의 값을 정규 표현식을 적용하겠다라는 의미
match() = 문자열의 처음부터 정규식과 매치되는지 조사
search() = 문자열 전체를 검색하여 정규식과 매치되는지 조사
    match와 차이점은 match는 처음부터 조사하기 때문에 앞부분에 표현식이 일치하지 않으면 None이 출력되지만
    search는 매치가 된 부분을 구간으로 알려준다.
findall() = 정규식과 매치되는 모든 문자열(substring)을 리스트로 리턴
finditer() = 정규식과 매치되는 모든 문자열(substring)을 반복 가능한 객체로 리턴
    findall과 차이점은 finditer로 찾은 값들은 iterable한 값을 가지는 것이고
    그 요소들이 match된 객체들
    
re.compile.match("문자열") / match 메서드, 문자열을 정규표현식에 맞춘 후에 알려주는 정보들
    group() = 매치된 문자열을 리턴 
    start() = 매치된 문자열의 시작 위치 리턴
    end() = 매치된 문자열의 끝 위치를 리턴
    span() = 매치된 문자열의 (시작, 끝)에 해당하는 튜플 

re.compile("문자열", re.DOTALL) / 메타 문자 . 은 \n을 미포함, 뒤에 re.DOTALL을 붙여서 사용하면 \n까지 매치

re.compile("문자열", re.IGNORECASE or re.I) / 대소문자 구별 없이 모두 매치

re.compile("문자열", re.MULTILINE or re.M) / 문자열의 처음이 아니라 각 줄의 처음을 모두 매치

re.compile("문자열", re.VERBOSE or re.X) / 문자열에 주석(# 주석)을 추가할 수 있으며 공백은 compile할 때 제거

정규 표현식에서 순수한 문자열로 "\"를 사용하고 싶다면 \\ 로 사용

# 자주 사용하는 문자 클래스
\d = 숫자와 매치, [0-9]와 동일
\D = \d 값의 not값, [^0-9]와 동일
\s = whitespace 문자와 매치, [ \t\n\r\f\v]와 동일한 표현식, 맨 앞 빈칸은 실수가 아니라 공백문자(space)를 의미
\S = \s 값의 not값, [^ \t\n\r\f\v]와 동일
\w = 문자와 숫자(alphanumeric) 매치, [a-zA-Z0-9_]와 동일
\W = \w 값의 not값, [^a-zA-Z0-9_] 와 동일


--------------------------------------------------------------------------------------------------------------------


파이썬 산술 연산자 7가지


+ : 덧셈
- : 뺄셈
* : 곱셈
/ : 나눗셈
** : 거듭제곱
// : 몫
% : 나머지


--------------------------------------------------------------------------------------------------------------------


이 외 코드들

print 옵션들
    sep / separation의 준말, 구분자를 지정하는 함수
        print("S", "E", "P", sep="2") => S@E@p

    end / 그 뒤 출력값과 이어서 출력
        print("I like", end=" ")
        print("money") => I like money

    format / 부분적으로 문자열 바꾸기
        print("{0}월 {1}일 입니다.".format(10, 31)) => 10월 31일 입니다.

    Escape / 파이썬 문법을 탈출하여 출력하고 싶을때 사용
        \n : 줄바꿈
        \t : 탭(TAP)
        \\ : "\" 출력
        \' : 작은 따옴표 출력
        \" : 큰 따옴표 출력
        \b : 백 스페이스, 삭제를 의미

random.sample(range(start, stop), counts) => 범위 내에서 랜덤한 수들을 counts의 수만큼 추출

# HTML 코드 정리
requests 모듈
    requests.get(URL) / 해당 URL의 요청을 받아오는 기능
    requests.text / 받아온 사이트를 text화
    .get_text() / 리스트 안 내용들을 text화

bs 모듈 (import)
    .select() / 사용할 태그를 선택해서 가져오는 기능(path를 괄호안에 넣어주기)

math 모듈 (import math)
    math.factorial(x) => x(정수)의 팩토리얼 값을 리턴
    math.ceil(x) => x 값을 올림 처리
    math.floor(x) => x 값을 내림
    math.fabs(x) => x의 절대값
    math.gcd(x, y) => x와 y의 최대 공약수를 반환
    math.modf(x) => x의 소수부분과 정수부분을 나눠서 반환 (ex. x가 3.14인 경우 (0.1400000012, 3.0)으로 반환)
    math.log(x, y) => y를 밑으로 하는 log a의 로그 값을 리턴
    math.log1p(x) => e를 밑으로 하는 x+1 로그
    math.log2(x) => 2를 밑으로 하는 x 로그
    math.log10(x) => 10을 밑으로 하는 x 로그
    math.sqrt(x) => x의 제곱근
    math.cos(x) => 코사인
    math.sin(x) => 사인
    math.tan(x) => 탄젠트
    math.pi => 원주율
    math.e => 자연 상수
    math.tau => 타우


--------------------------------------------------------------------------------------------------------------------


따로 사용하는 특정 코드들

리스트 컴프리헨션 활용
    [my_str[i: i + n] for i in range(0, len(my_str), n)]
    [i for i in range if @@] / for 문과 if 문을 함께 사용할 때, 이와 같이 사용

if 문 한줄에 사용할 시
    True 값 if 조건 else False 값
    
for _ in range(): => for 문에서의 변수를 따로 사용하지 않고 돌리기만 할 때 사용

list[a:b] => a부터 b까지의 리스트를 모두 가져옴

.count(x) = x의 문자열이 몇개 있는지 알려주는 기능

set(list) = 리스트 안의 중복 요소를 하나로 만들어 주는 기능 / {}, 딕셔너리 형태로 값을 
   
indexing(인덱싱) = list[start:end:up] / 시작과 끝지점을 설정하고 몇 개씩 뛰어 넘어 갈지 설정

"".join(str(i) for i in list) / 리스트의 모든 내용을 한 문자열로 치환(리스트의 내용이 string이여야 함)

list.remove("삭제 내용") / 리스트에서 해당 내용을 삭제, 모든 내용 삭제가 아니고 발견한 첫 번째 요소만 

list.pop(인덱스) / 해당 인덱스 위치의 내용을 삭제, 인덱스를 지정하지 않으면 -1 인덱스 값을 삭제

del list[인덱스] / 해당 인덱스 위치의 내용을 삭제

for i in reversed(range(x)) / for 문을 원소를 거꾸로 뒤집고 사용

특정 진수 변환을 위해 사용하는 코드 (num은 변환할 숫자, base는 진법 숫자)
string 모듈로 11진법 이상도 변환이 가능
import string
def convert_recur(num, base):
    number = string.digits + string.ascii_uppercase
    q, r = divmod(num, base)
    return convert_recur(q, base) + number[r] if q else number[r]

10진법 아래인 경우는 아래 코드로 작동해도 가능
def solution(n, q):
    rev_base = ''
    while n > 0:
        n, mod = divmod(n, q)
        rev_base += str(mod)
    return rev_base[::-1]

from itertools import combinations
my_list = [1, 2, 3, 4, 5]
comb_list = list(combinations(my_list, 3)) / 조합의 모든 경우를 만들어 주는 combinations 함수

소수를 구하는 코드 (에라스토테네스의 알고리즘)
def solution(n):
    if n == 2:
        return 1
    elif n == 3:
        return 2
    else:
        prime = [True] * (n+1)
        for i in range(2, int(n**0.5)+1):
            if prime[i]:
                for j in range(i*i, n+1, i):
                    prime[j] = False
        return len([x for x in range(2, n+1) if prime[x]])

약수를 구하는 코드 (divisors라는 리스트에 약수들이 전부 포함)
def get_divisors(n):
    divisors = []
    for i in range(1, int(n**0.5)+1):
        if n % i == 0:
            divisors.append(i)
            if i != n // i:
                divisors.append(n // i)
    divisors.sort()
    return divisors


--------------------------------------------------------------------------------------------------------------------


def solution(s):
    answer = ""
    for i in "abcdefghijklmnopqrstuvwsyz":
        if 1 == s.count(i):
            answer += i
            
    return answer
영문자를 하나만 있는 것을 하나씩만 가져올 때 코드


--------------------------------------------------------------------------------------------------------------------


numpy 모듈
    np.gcd(x, y) = x와 y의 최대공약수 
    np.random.randn(2, 3) => array([[-1.236, 0.213, 1.468879],  
                                        [-1.33667, 0.548797, -0.659879]]) 이와 같이 랜덤한 array 형태를 만들 수 있음
    np.ndarray() = numpy 행렬화
    np.zeros(x) = array([0., ... ,0.]) x개만큼의 0. 인 array 생성
        2차원으로 만드려면 np.zeros((x ,y)) = x는 가로, y는 세로 개수
    np.ones(x) = 위와 동일하지만 1. 을 리턴
    np.sum(x, axis=1) = 열 간의 합 계산
    np.sum(x, axis=0) = 행 간의 합 계산
    np.mean(x) = 전체 성분의 평균
    x[x, y] = x(2차원)라는 array에서 인덱싱 방법
    np.array(x) = x를 array화 시키기
    np.std(x) = x의 표준편차 (x는 리스트)
    np.min(x, axis=1) = x의 최솟값 (max는 최댓값)
    np.argmin(x) = x의 전체 성분의 최소값 (argmax는 반대)
    np.cumsum(x) = x의 누적합 (cumprod는 누적곱)
    numpy_array.tolist() = np array를 list로 


--------------------------------------------------------------------------------------------------------------------


selenium 코드
from selenium import webdriver / 셀레니움 드라이버 불러오기
from selenium.webdriver.common.by import By / 셀레니움 By 모듈 불러오기
from selenium.webdriver.common.keys import Keys / 셀레니움 Keys 모듈 불러오기
import chromedriver_autoinstaller / 자동적으로 업데이트
chromedriver_autoinstaller() / 자동 업데이트 함수
chrome_options = webdriver.ChromeOptions() / 웹드라이버 변수 설정
chrome_options.add_argument("--headless") / 창을 띄우지 않고 HTML 파싱 기능
chrome_options.add_argument("--disable-gpu") / GPU를 사용하지 않는 기능

tkinter 코드
# tkinter 불러오기 / 단순 import tkinter 사용하면 tk()를 사용할 수 없음
from tkinter import *
# 시간 관련 모듈 불러오기
from datetime import datetime
import time


# 창 생성
win = Tk()

# 창 크기 설정
win.geometry("1000x1000")

# 창 제목 설정
win.title("train")

# 전체 폰트 설정 / "*Font"를 작성하여 폰트 값을 지정하고 뒤에 값으로 설정
win.option_add("*Font", "맑은고딕 25")

# 전체 창 색깔 지정 / bg="원하는 색깔"
# win.configure(bg="red")


# 버튼 명령어 --------------------------------------------------------------------

# 현재 시간 함수 설정
def now_time():
    dnow = datetime.now()
    btn.config(text=dnow)

# 버튼 값 생성
btn = Button(win)

# 버튼 크기 설정
btn.config(width=30, height=1)

# 버튼 내용 설정
btn.config(text="현재 시각")

# 버튼 기능 설정 / 아래 코드는 현재 시각을 나타내는 함수 사용
btn.config(command=now_time)

# 버튼 배치
btn.pack(side="bottom")


# 입력 명령어 --------------------------------------------------------------------

# 입력창 생성
ent = Entry(win)

# 입력된 내용 추출
A_get = ent.get()

# 현재 시간 함수 설정
def lotto_N():
    A_get = ent.get()
    btn2.config(text=A_get)

# 예시를 위한 버튼 생성
btn2 = Button(win)
btn2.config(width=30, height=1)
btn2.config(text="로또 당첨 번호 확인")
btn2.config(command=lotto_N)
btn2.pack()

# 입력창 배치
ent.pack()

# 입력창 보충 내용
"""
입력 문자 숨기기
ent.config(show="*") / 대체하려는 문자열로 수정

입력창 문자열 삽입
ent.insert(0, "***@***.com") / 대체하려는 문자열로 수정, 첫 번째 파라미터는 0번째 인덱스를 의미

입력창 문자열 삭제
ent.delete(0, 3) / 0~2번째 문자열 삭제

입력창 클릭시 명령
ent.bind("<Button-1>", clear) / "<Button-1>"은 좌클릭을 의미, 우클릭은 -2,
뒤 clear는 claer라는 함수를 의미(따로 만들어야 함)
def clear(event):
    ent.delete(0, len(ent.get()))
"""


# 라벨 명령어 --------------------------------------------------------------------

# 라벨창 생성
lab = Label(win)

# 라벨창 내용
lab.config(text="ID")

# 라벨창 배치
lab.pack()

# 예시를 위한 입력창과 버튼을 제작
ent2 = Entry(win)
# 처음에 입력문자를 미리 넣어놓는 방법
ent2.insert(0, "아무거나")
# 버튼을 눌렀을 때, 내용을 지워주는 방법
# 함수를 만들어 같이 사용
def clear(event):
    if ent2.get() == "아무거나":
        ent2.delete(0, len(ent2.get()))
ent2.bind("<Button-1>", clear)
ent2.config(show="*")
ent2.pack()
btn3 = Button(win)
btn3.config(text="로그인")
btn3.pack()

# 라벨 이미지 불러오기
lab2 = Label(win)
img = PhotoImage(file="C:/Crawling/GUI/sele.png", master=win)
# 이미지를 4분의 1 크기로 줄여주는 기능
img = img.subsample(2)
lab2.config(image=img)
lab2.pack()


# 위젯 명령어 --------------------------------------------------------------------

# 명령어 보기 전 함수 단어 설명
# pack() = 짐을 싸다, 어떤 공간에 물건을 집어 넣는 것, 함수 지정
# grid() = 격자 무늬, 공간을 나눠놓고 할당하는 것, pack()과 동시에 사용 불가
# place() = (어떠한 장소) 놓다, 할당이 아닌 위젯 자체를 원하는 공간에 지정
# place > grid > pack 의 크기로 자유도가 높음
# img 참고
# place(relx= x, rely=y)로 설정했을 때, x와 y가 0.5라면 0.5의 비율로 버튼이 생성됨


# 실행 파일 명령어 --------------------------------------------------------------------

# pyinstaller 사용 (미리 모듈 설치)
# cmd에 pyinstaller --onefile(이건 하나의 파일로) --noconsole(콘솔창 없이) py파일 이름으로

# Label
lab_game = Label(win)
lab_game.config(text = "표적 개수")
lab_game.pack()

# Entry
ent_game = Entry(win)
ent_game.pack

k = 1

def cc():
    global k
    if k < num_1:
        k += 1
        btnG.destroy()
        ran_btn()
    else:
        fin = datetime.now()
        dif_sec = (fin-start).total_seconds()
        btnG.destroy()
        lab = Label(win)
        lab.config(text="Clear" + str(dif_sec) + "초")
        lab.pack(pady=230)

def ran_btn():
    global btnG
    btnG = Button(win)
    btnG.config(bg = "red")
    btnG.config(command=cc)
    btnG.config(text=k)
    btnG.place(relx=random.random(), rely=random.random()) # random.random()은 0부터 1사이의 값을 랜덤으로 추출

def btn_G():
    global num_1 # 이라고 작성하면 함수 밖에서도 작동
    global start
    num_1 = int(ent_game.get())
    # win.pack_slaves() win에 모든 pack을 리스트로 가져오는 함수(grid와 place도 가능) / [ent_game, lab_game] 이런 형식으로 가져옴
    for i in win.pack_slaves():
        i.destroy() # destroy는 삭제의 명령어
    win.geometry("500x500")
    # 랜덤한 위치에서 버튼 만들기
    ran_btn()
    # 현재 시간 확인
    start = datetime.now()

# Button
btn_game = Button(win)
btn_game.config(text = "시작")
btn_game.config(command=btn_G)
btn_game.pack()

# 다양한 위젯 명령어 --------------------------------------------------------------------

# Listbox 여러 리스트를 주고 여러개 선택도 가능
lb = Listbox(win)
# lb.config(selectmode="multiple") # 여러개 선택할 수 있게 하는 기능
lb.insert(0, "1번") # 리스트 추가
lb.insert(1, "2번")
lb.insert(2, "3번")
lb_btn = Button(win)
lb_btn.config(text="옵션 선택")
def click():
    bt_text = lb.curselection()[0] # 현재 리스트박스에 선택된 값을 지정, 리턴값은 튜플 형태
    lb_lab.config(text=str(bt_text+1)+"번")
lb_btn.config(command=click)
lb_btn.pack()
lb_lab = Label(win)
lb_lab.pack()
lb.pack()
# Checkbutton 여러개 체크할 수 있음
cv = IntVar() # 체크버튼이 체크됐는지 구분하는 인자
cb = Checkbutton(win, text="1번", variable=cv) # 버튼에 상태에 따라 cv값이 바뀜, 선택을 하면 cv는 1 / 안하면 0, cv.get()을 사용해서 리턴 받아야 함
cb.pack()
# Radiobutton 여러개 중 반드시 하나만 클릭해야함
rv = IntVar() # 체크버튼이 체크됐는지 구분하는 인자
rb = Radiobutton(win, text="1번", value=0, variable=rv) # value값을 정하여 여러 버튼을 구분해주기
rb.pack()
# Combobox 여러개의 List 중 보통 하나만 선택해야 할 때 사용
from tkinter.ttk import * # Combobox를 사용하려면 ttk를 불러와야 함 / 예전 모듈이라 글이 이상하게 잡힐수도 있음 / 콤보박스를 사용할 때만 사용
cb_list = ["1", "2", "3"] # 먼저 사용할 리스트 정의
cb = Combobox(win)
cb.config(values=cb_list) # values로 사용할 값 정의
cb.pack()
# Spinbox 수량을 변경할 때 사용
sp = Spinbox(win)
sp.config(from_=-1, to=5) # from_=정수, to=정수로 config하면 해당 범위 내에서 숫자가 움직임
sp.pack()
# Scale 슬라이드 바, 윈도우에서 볼륨 조절할 때 나오는 창
sc = Scale(win) # 기본적으로 0부터 100까지 세팅(아래가 100) / 가로로 하고 싶다면 config 값으로 orient="horizontal" 지정
#tickinterval = 10과 같이 적용하면 10의 단위로 쪼개서 보여줌 / lenght = 1000과 같이 적용하면 길이를 1000으로 지정
sc.pack()


# 창 실행
win.mainloop()


pass
