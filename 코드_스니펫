기본 함수 (참고 사이트 : https://wikidocs.net/32)

1. split / 스플릿 / 문자열을 나누어서 리스트에 담는 기능
    문자열.split(나눌 문자)
    "This,is,split".split(",") => ['This', 'is', 'split']

2. replace / 리플레이스 / 특정한 문자를 다른 문자로 대체하는 기능
    대체를 하려는 대상(문자열, 리스트는 안됨).replace(제거하려는 문자, 제거된 자리에 들어갈 문자, 변경할 횟수(default값은 문자열 전체))
    "This,is,replace".replace(",", "", 1) => 'Thisis,replace'

3. abs(x) => x를 절대값으로 리턴

4. all(x) => x는 iterable(반복 가능한, for문 사용가능한) 데이터, x에 요소 중 거짓(0값도 거짓)이 하나라도 있으면 False, 아니면 True
    all([1, 2, 3]) => True
    all([1, 2, 3, 0]) => False
    
5. any(x) => all과 조건은 같지만 모두 거짓일 때만 False 리턴, 아니면 True

! 특이사항 : 입력 인수가 []나 "" 이면 all은 True, any는 False

6. chr(x) => x는 숫자만, 그 숫자에 해당하는 유니코드(모든 컴퓨터에서 일관되게 표현하고 다룰 수 있게 잡힌 코드)를 리턴
    chr(97) => "a"
    chr(44032) => "가"

7. dir(객체) => 객체가 가지고 있는 변수나 함수를 모두 출력해주는 함수
    dir([1, 2]) => ['__add__', '__class__', ... ] / 어떤 기능이 있는지 알 수 있음
    
8. divmod(a, b) => a, b 2개의 숫자를 받음 / a를 b로 나눈 몫과 나머지를 튜플로 리턴
    divmod(7, 3) => (2, 1)

9. enumerate / 열거함수 / 순서잡힌 채로 열거 / 순서함수 / iterable 데이터 위치 확인
    보통 for 문과 같이 사용
    for i, name in enumerate(["A", "B", "C", "D"]):
        print(i, name)

10. eval(expression) / 문자열로 구성된 표현식 실행 / 문자열 실행시키는 방법
    eval("1+2") => 3
    eval('"hi" + "man"') => 'himan' / 전체 문자를 포함하는 ""과 안의 문자 ''를 구분해야 작동
    eval("divmod(4, 3)") => (1, 1)

11. filter(func, iterable) / 걸러내는 함수
    iterable 객체를 함수에 적용해서 True 값만 참으로 묶어내서 리턴(리스트 형식으로)

12. 파이썬에선 기본적으로 10진수 표현법 사용
    다른 진수의 형태로 숫자를 표현하려면 숫자 앞에 접두어를 붙여야 함
    2진수 : 0b / 42 == 0b101010
    8진수 : 0o / 42 == 0o52
    16진수 : 0x / 42 == 0x2a
    
    2진수로 반환 : bin(42) => "0b101010"
    8진수로 반환 : oct(42) => "0o52"
    16진수로 반환 : hex(42) => "0x2a"

13. id(object) / 고유 주소 값 / 객체의 고유값
    id(3) => 135072304
    컴퓨터의 객체들에는 저마다의 고유값이 존재
    이 함수를 통해 해당 고유값을 볼 수 있음


--------------------------------------------------------------------------------------------------------------------


정규표현식 (참고 사이트 : https://wikidocs.net/4308)
re 모듈을 꼭 시행할 것

[] = 문자클래스
[From - To] = From부터 To까지를 의미 / [1-10] = [12345678910] / [a-zA-Z] = 모든 알파벳
[^] = 반대(not)의 의미
. = 줄바꿈 문자(\n)를 제외한 모든 문자와 매치 / a.b => a와 b 사이에 어떤 문자가 들어가도 매치
* = * 앞에 있는 문자가 0부터 무한대로 반복될 수 있다는 의미 / ca*t => ct, cat, caaaaat 다 가능
+ = * 와 의미가 거의 다 똑같지만 1부터 반복 실행 / ca+t 에서 ct는 매치 안됨
{m} = 반드시 m만큼 앞의 문자를 반복 실행 / ca{2}t => caat 를 의미
{m, n} = m ~ n만큼 앞의 문자를 반복 실행 / ca{2, 5}t => caat, caaat, caaaat, caaaaat 모두 다 매치 가능
? = {0, 1}을 의미 / ca?t => ct, cat 두개를 의미


re.compile(x) = x의 값을 정규 표현식을 적용하겠다라는 의미
match() = 문자열의 처음부터 정규식과 매치되는지 조사
search() = 문자열 전체를 검색하여 정규식과 매치되는지 조사
    match와 차이점은 match는 처음부터 조사하기 때문에 앞부분에 표현식이 일치하지 않으면 None이 출력되지만
    search는 매치가 된 부분을 구간으로 알려준다.
findall() = 정규식과 매치되는 모든 문자열(substring)을 리스트로 리턴
finditer() = 정규식과 매치되는 모든 문자열(substring)을 반복 가능한 객체로 리턴
    findall과 차이점은 finditer로 찾은 값들은 iterable한 값을 가지는 것이고
    그 요소들이 match된 객체들


# 자주 사용하는 문자 클래스
\d = 숫자와 매치, [0-9]와 동일
\D = \d 값의 not값, [^0-9]와 동일
\s = whitespace 문자와 매치, [ \t\n\r\f\v]와 동일한 표현식, 맨 앞 빈칸은 실수가 아니라 공백문자(space)를 의미
\S = \s 값의 not값, [^ \t\n\r\f\v]와 동일
\w = 문자와 숫자(alphanumeric) 매치, [a-zA-Z0-9_]와 동일
\W = \w 값의 not값, [^a-zA-Z0-9_] 와 동일

